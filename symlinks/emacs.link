;; Bring in Emacs' common lisp, we need it for the loop macros that rails-mode uses

;; Install these packages from ELPA:
;; * magit
;; * ruby-end
;; * inf-ruby
;; * web-mode
;; * projectile
;; * projectile-rails
;; * yasnippet
;; * js2-mode
;; * python-mode
;; * elixir-mode
;; * evil
;; * alchemist
;; * direnv
;; * git-link
;; * ivy
;; * fira-code-mode  (then run M-x fira-code-mode-install-fonts)
;; * ag
;;
;; From Github:
;; * solarized (from sellout/emacs-color-theme-solarized in .emacs.d/themes)
;; * rcodetools.el (in .emacs.d/lisp)
;; * rspec-mode (from github/bschmeck in .emacs.d/lisp)
;; * yari (from github/hron/yari.el in .emacs.d/lisp)

(require 'cl)
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(require 'projectile)

(require 'yasnippet)
(yas-global-mode 1)

(tool-bar-mode -1)
(menu-bar-mode -1)
(setq confirm-kill-emacs 'y-or-n-p)

(direnv-mode)

(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))
(setq whitespace-line-column 100)

(windmove-default-keybindings)

(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(defun shmk/ivy--regex-dashes (str)
  "Build a regex sequence from STR.
Insert .* before each -."
  (let ((subs (split-string str "-")))
    (if (= (length subs) 1)
        (ivy--regex str)
      (ivy--regex (concat "^" (string-join subs "[[:alnum:]]*-"))))))
(setq ivy-re-builders-alist
      '((execute-extended-command . shmk/ivy--regex-dashes)
        (t . ivy--regex-plus)))
(ivy-prescient-mode)
;;(require 'evil)

(add-to-list 'load-path "~/.emacs.d/lisp")
(let ((default-directory "~/.emacs.d/"))
  (normal-top-level-add-subdirs-to-load-path))
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")

(add-to-list 'auto-mode-alist '("emacs.link" . emacs-lisp-mode))

;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/emacs-goodies-el/")

(setq indent-tabs-mode nil)
(setq default-buffer-file-coding-system nil)
(setq default-tab-width 4)

(global-set-key "\C-a" 'back-to-indentation)
(global-set-key "\M-m" 'move-beginning-of-line)
(global-set-key "\M-i" 'imenu)

;; ===== Ruby ==========
(require 'ruby-mode)
(add-to-list 'auto-mode-alist '("\\*ruby\\*\\'" . python-mode))
(setq ruby-insert-encoding-magic-comment nil)
(autoload 'run-ruby "inf-ruby")
(require 'rcodetools)
(setq line-length-projects '("importer" "beehive"))
(add-hook 'ruby-mode-hook
 (lambda ()
   (define-key ruby-mode-map (kbd "<f5>") 'xmp)
   (electric-pair-mode)
   (add-to-list 'write-file-functions 'delete-trailing-whitespace)
   (if (member (projectile-project-name) line-length-projects)
       (whitespace-mode))
 )
)

;;(require 'rhtml-mode)
(require 'ruby-end)
(setq ruby-end-insert-newline nil)
(require 'rspec-mode)
(setq rspec-use-rake-when-possible nil)
(add-hook 'after-init-hook 'inf-ruby-switch-setup)

(setq projectile-enable-caching t)
(require 'projectile-rails)
(add-hook 'find-file-hooks 'projectile-rails-on)
(define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map)

(require 'rspec-mode)

(require 'yari)

(require 'bundler)

(defun ruby-buffer ()
  "Switch to a ruby buffer."
  (interactive)
  (let* ((buffer-name "*ruby-xmp*")
         (newline "\n")
         (requires (list "require 'rspec/autorun'" newline "require 'active_support/all'"))
         (rspec-block (list "RSpec.describe do" newline newline "end"))
         (boilerplate (apply #'append (list requires (make-list 4 newline) rspec-block)))
         (buf (get-buffer-create buffer-name)))
    (switch-to-buffer buf)
    (unless (buffer-modified-p buf)
        (ruby-mode)
        (apply 'insert boilerplate)
        (goto-line 4)
    )
  )
)
(global-set-key (kbd "<f6>") 'ruby-buffer)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(defun disable-ruby-autocomplete (wrapped-function &rest args)
  (if (string= (buffer-name) "*rspec-compilation*")
      (let ((process-environment (cons "RUBY_DEBUG_NO_RELINE=true" process-environment)))
        (apply wrapped-function args))
    (apply wrapped-function args)))
(advice-add 'recompile :around #'disable-ruby-autocomplete)

;; ===== Elixir ======
(require 'alchemist)
(add-hook 'elixir-mode-hook
          (lambda ()
            (set (make-variable-buffer-local 'ruby-end-expand-keywords-before-re)
                 "\\(?:^\\|\\s-+\\)\\(?:do\\)")
            (set (make-variable-buffer-local 'ruby-end-check-statement-modifiers) nil)
            (ruby-end-mode +1)
            (alchemist-mode)
            (add-to-list 'write-file-functions 'delete-trailing-whitespace)
            )
          )

;; ===== Web Mode ====
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.eex\\'" . web-mode))
(eval-after-load 'web-mode
  '(progn
     (define-key web-mode-map (kbd "C-c C-n")   'web-mode-tag-match)
     (define-key web-mode-map (kbd "C-c C-p")   'web-mode-element-parent)
     (setq web-mode-markup-indent-offset 2)
     (setq web-mode-code-indent-offset 2)))

;; ===== Magit =========
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
(setq magit-push-always-verify nil)
;; (setq magit-branch-arguments (remove "--track" magit-branch-arguments))
(defun endless/visit-pull-request-url (arg)
  "Visit the current branch's PR on Github."
  (interactive "P")
  (let* ((remote-url (magit-get "remote"
                       (magit-get-remote)
                       "url"))
         (github-url (if (string-prefix-p "github:" remote-url)
                       "github.groupondev.com"
                       "github.com"))
         (project-path (replace-regexp-in-string
                         ".*github\\(?:\\.com\\)?:\\(.+?\\)\\(?:\\.git\\)?$"
                         "\\1"
                         remote-url))
         (branch (car (split-string (magit-get-current-branch) "^.*?/" t)))
         (base (if arg
                   (format "%s..." (magit-read-remote-branch "PR against" (magit-get-remote)))
                   ""))
         (pr-url (format "https://%s/%s/compare/%s%s"
                           github-url
                           project-path
                           base
                           branch)))
    (browse-url pr-url)))
(eval-after-load 'magit
  '(define-key magit-mode-map "V"
     #'endless/visit-pull-request-url))
(transient-insert-suffix 'magit-push "p"
  '("i" magit-push-implicitly))

;; ===== JavaScript ====
;; https://github.com/mooz/js2-mode
(autoload 'js2-mode "js2-mode" nil t)
(setq js-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;; Use spaces, not tabs
(defun my-js2-mode-hook ()
  (set-variable 'indent-tabs-mode nil))
(add-hook 'js2-mode-hook 'my-js2-mode-hook)

;; ===== Python =====
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

(add-hook 'python-mode-hook
	  (lambda ()
		(setq indent-tabs-mode nil)
	    (set (make-variable-buffer-local 'beginning-of-defun-function)
		 'py-beginning-of-def-or-class)
	    (setq outline-regexp "def\\|class ")))

;;(load "/home/bschmeck/.emacs.d/python-mode.el-6.0.3/python-mode.el")
(require 'python-mode)

(defun bash ()
  "Start 'bash' shell."
  (let ((binary-process-input t)
	(binary-process-output nil))
    (shell)))
(setq process-coding-system-alist
      (cons '("bash" . (raw-text-dos . raw-text-unix)) process-coding-system-alist))

;; ===== SLIME =====
;;(setq inferior-lisp-program "clisp")
;;(add-to-list 'load-path "c:/cygwin/usr/local/slime")
;;(require 'slime-autoloads)
;;(slime-setup)

;; ===== For C code, use BSD style =====
(setq c-default-style "bsd")
(setq c-label-offset -4)
(setq c-basic-offset 4)
(setq c-auto-newline nil)

(defun fill-column-hook ()
  (setq set-fill-column 80)
  (c-set-offset 'arglist-intro 'c-lineup-arglist-indent-newline)
  (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist-indent-newline)
  (c-set-offset 'arglist-cont 'c-lineup-arglist-indent-newline)
  (c-set-offset 'statement-cont 'c-lineup-arglist-indent-newline))
(defun c-mode-funs ()
  (auto-fill-mode t)
  (set-variable 'indent-tabs-mode nil))
(defun my-java-mode-hook ()
  (setq c-basic-offset 4))

(add-hook 'c-mode-hook 'fill-column-hook)
(add-hook 'c-mode-hook 'c-mode-funs)
(add-hook 'java-mode-hook 'my-java-mode-hook)
(defun c-lineup-arglist-indent-newline (langelem)
  "Works with arglist-intro"
  (save-excursion
    (beginning-of-line)
    (previous-line 1)
    (beginning-of-line-text)
    (vector (+ (current-column) 4))))

;; ===== Set the highlight current line minor mode =====

;; In every buffer, the line which contains the cursor will be fully
;; highlighted
(global-hl-line-mode 1)
;; Turn on Colorized Fonts
(global-font-lock-mode t)

;; ===== Set standard indent to 4 rather that 8 ====
(setq standard-indent 8)

;; ========== Enable Line and Column Numbering ==========
;; Show line-number in the mode line
(line-number-mode 1)

;; Show column-number in the mode line
(column-number-mode 1)

;; ========== Navigation Shortcuts ======================
(global-set-key (kbd "M-g") 'goto-line)   ; use Meta-g for goto-line
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "s-<up>") #'beginning-of-buffer)
(global-set-key (kbd "s-<down>") #'end-of-buffer)

;; ========= Meraki =========
(defun toggle-dev-box ()
       "Flip between current file on the dev box and locally"
       (interactive)
       (let ((current_file (buffer-file-name))
             (local_prefix "/Users/bschmeck/src/manage/")
             (remote_prefix "/ssh:dev:/home/bschmeck/co/manage/"))
         (cond ((string-prefix-p local_prefix current_file) (meraki-visit-on-dev-box))
               ((string-prefix-p remote_prefix current_file) (meraki-visit-locally)))))
(defun meraki-visit-on-dev-box ()
       "Open a buffer for the current file on the dev box"
       (interactive)
       (let ((current_file (buffer-file-name))
             (local_prefix "/Users/bschmeck/src/manage/")
             (remote_prefix "/ssh:dev:/home/bschmeck/co/manage/"))
             (if (string-prefix-p local_prefix current_file)
                 (find-file (concat remote_prefix (string-remove-prefix local_prefix current_file))))))
(defun meraki-visit-locally ()
       "Open a buffer for the current file on the dev box"
       (interactive)
       (let ((current_file (buffer-file-name))
             (local_prefix "/Users/bschmeck/src/manage/")
             (remote_prefix "/ssh:dev:/home/bschmeck/co/manage/"))
             (if (string-prefix-p remote_prefix current_file)
                 (find-file (concat local_prefix (string-remove-prefix remote_prefix current_file))))))

;; ========== Fira Code ================================
(global-fira-code-mode)
;; UTF-8 Ligatures for code
;; From https://gist.github.com/mordocai/50783defab3c3d1650e068b4d1c91495
;; This works when using emacs --daemon + emacsclient
;; (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
;; This works when using emacs without server/client
;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
;; I haven't found one statement that makes both of the above situations work, so I use both for now

;; (defconst fira-code-font-lock-keywords-alist
;;   (mapcar (lambda (regex-char-pair)
;;             `(,(car regex-char-pair)
;;               (0 (prog1 ()
;;                    (compose-region (match-beginning 1)
;;                                    (match-end 1)
;;                                    ;; The first argument to concat is a string containing a literal tab
;;                                    ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
;;           '(("\\(www\\)"                   #Xe100)
;;             ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
;;             ("\\(\\*\\*\\*\\)"             #Xe102)
;;             ("\\(\\*\\*/\\)"               #Xe103)
;;             ("\\(\\*>\\)"                  #Xe104)
;;             ("[^*]\\(\\*/\\)"              #Xe105)
;;             ("\\(\\\\\\\\\\)"              #Xe106)
;;             ("\\(\\\\\\\\\\\\\\)"          #Xe107)
;;             ("\\({-\\)"                    #Xe108)
;;             ;; ("\\(\\[\\]\\)"                #Xe109)
;;             ("\\(::\\)"                    #Xe10a)
;;             ("\\(:::\\)"                   #Xe10b)
;;             ("[^=]\\(:=\\)"                #Xe10c)
;;             ("\\(!!\\)"                    #Xe10d)
;;             ("\\(!=\\)"                    #Xe10e)
;;             ("\\(!==\\)"                   #Xe10f)
;;             ("\\(-}\\)"                    #Xe110)
;;             ("\\(--\\)"                    #Xe111)
;;             ("\\(---\\)"                   #Xe112)
;;             ("\\(-->\\)"                   #Xe113)
;;             ("[^-]\\(->\\)"                #Xe114)
;;             ("\\(->>\\)"                   #Xe115)
;;             ("\\(-<\\)"                    #Xe116)
;;             ("\\(-<<\\)"                   #Xe117)
;;             ("\\(-~\\)"                    #Xe118)
;;             ("\\(#{\\)"                    #Xe119)
;;             ("\\(#\\[\\)"                  #Xe11a)
;;             ("\\(##\\)"                    #Xe11b)
;;             ("\\(###\\)"                   #Xe11c)
;;             ("\\(####\\)"                  #Xe11d)
;;             ("\\(#(\\)"                    #Xe11e)
;;             ("\\(#\\?\\)"                  #Xe11f)
;;             ("\\(#_\\)"                    #Xe120)
;;             ("\\(#_(\\)"                   #Xe121)
;;             ("\\(\\.-\\)"                  #Xe122)
;;             ("\\(\\.=\\)"                  #Xe123)
;;             ("\\(\\.\\.\\)"                #Xe124)
;;             ("\\(\\.\\.<\\)"               #Xe125)
;;             ("\\(\\.\\.\\.\\)"             #Xe126)
;;             ("\\(\\?=\\)"                  #Xe127)
;;             ("\\(\\?\\?\\)"                #Xe128)
;;             ("\\(;;\\)"                    #Xe129)
;;             ("\\(/\\*\\)"                  #Xe12a)
;;             ("\\(/\\*\\*\\)"               #Xe12b)
;;             ("\\(/=\\)"                    #Xe12c)
;;             ("\\(/==\\)"                   #Xe12d)
;;             ;; ("\\(/>\\)"                    #Xe12e)
;;             ("\\(//\\)"                    #Xe12f)
;;             ("\\(///\\)"                   #Xe130)
;;             ("\\(&&\\)"                    #Xe131)
;;             ("\\(||\\)"                    #Xe132)
;;             ("\\(||=\\)"                   #Xe133)
;;             ("[^|]\\(|=\\)"                #Xe134)
;;             ("\\(|>\\)"                    #Xe135)
;;             ("\\(\\^=\\)"                  #Xe136)
;;             ("\\(\\$>\\)"                  #Xe137)
;;             ("\\(\\+\\+\\)"                #Xe138)
;;             ("\\(\\+\\+\\+\\)"             #Xe139)
;;             ("\\(\\+>\\)"                  #Xe13a)
;;             ("\\(=:=\\)"                   #Xe13b)
;;             ("[^!/]\\(==\\)[^>]"           #Xe13c)
;;             ("\\(===\\)"                   #Xe13d)
;;             ("\\(==>\\)"                   #Xe13e)
;;             ("[^=]\\(=>\\)"                #Xe13f)
;;             ("\\(=>>\\)"                   #Xe140)
;;             ("\\(<=\\)"                    #Xe141)
;;             ("\\(=<<\\)"                   #Xe142)
;;             ("\\(=/=\\)"                   #Xe143)
;;             ("\\(>-\\)"                    #Xe144)
;;             ("\\(>=\\)"                    #Xe145)
;;             ("\\(>=>\\)"                   #Xe146)
;;             ("[^-=]\\(>>\\)"               #Xe147)
;;             ("\\(>>-\\)"                   #Xe148)
;;             ("\\(>>=\\)"                   #Xe149)
;;             ("\\(>>>\\)"                   #Xe14a)
;;             ("\\(<\\*\\)"                  #Xe14b)
;;             ("\\(<\\*>\\)"                 #Xe14c)
;;             ("\\(<|\\)"                    #Xe14d)
;;             ("\\(<|>\\)"                   #Xe14e)
;;             ("\\(<\\$\\)"                  #Xe14f)
;;             ("\\(<\\$>\\)"                 #Xe150)
;;             ("\\(<!--\\)"                  #Xe151)
;;             ("\\(<-\\)"                    #Xe152)
;;             ("\\(<--\\)"                   #Xe153)
;;             ("\\(<->\\)"                   #Xe154)
;;             ("\\(<\\+\\)"                  #Xe155)
;;             ("\\(<\\+>\\)"                 #Xe156)
;;             ("\\(<=\\)"                    #Xe157)
;;             ("\\(<==\\)"                   #Xe158)
;;             ("\\(<=>\\)"                   #Xe159)
;;             ("\\(<=<\\)"                   #Xe15a)
;;             ("\\(<>\\)"                    #Xe15b)
;;             ("[^-=]\\(<<\\)"               #Xe15c)
;;             ("\\(<<-\\)"                   #Xe15d)
;;             ("\\(<<=\\)"                   #Xe15e)
;;             ("\\(<<<\\)"                   #Xe15f)
;;             ("\\(<~\\)"                    #Xe160)
;;             ("\\(<~~\\)"                   #Xe161)
;;             ;; ("\\(</\\)"                    #Xe162)
;;             ("\\(</>\\)"                   #Xe163)
;;             ("\\(~@\\)"                    #Xe164)
;;             ("\\(~-\\)"                    #Xe165)
;;             ("\\(~=\\)"                    #Xe166)
;;             ("\\(~>\\)"                    #Xe167)
;;             ("[^<]\\(~~\\)"                #Xe168)
;;             ("\\(~~>\\)"                   #Xe169)
;;             ("\\(%%\\)"                    #Xe16a)
;;            ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
;;             ("[^:=]\\(:\\)[^:=]"           #Xe16c)
;;             ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
;;             ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

;; (defun add-fira-code-symbol-keywords ()
;;   (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

;; (add-hook 'prog-mode-hook
;;           #'add-fira-code-symbol-keywords)

;; Trying to speed up TRAMP.  We're only concerned with Git, so turn off the other VC backends.
(setq vc-handled-backends '(Git))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "31a01668c84d03862a970c471edbd377b2430868eccf5e8a9aec6831f1a0908d" default))
 '(fill-column 80)
 '(frame-background-mode 'light)
 '(git-commit-finish-query-functions 'nil)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ivy-mode t)
 '(js2-basic-offset 4)
 '(magit-diff-arguments '("--ignore-space-change" "--no-ext-diff" "-U1"))
 '(magit-status-show-tags nil)
 '(package-selected-packages
   '(ivy-prescient prescient ivy yaml-mode git-timemachine git-link flymake-go go-mode ag ## direnv company evil elixir-mode rspec-mode projectile-rails projectile yasnippet web-mode ruby-end python-mode magit js2-mode inf-ruby coffee-mode))
 '(projectile-rails-fixture-dirs '("spec/factories/"))
 '(projectile-rails-javascript-dirs nil)
 '(projectile-rails-stylesheet-dirs nil)
 '(rails-rake-use-bundler-when-possible nil)
 '(tramp-remote-path
   '(tramp-default-remote-path "/usr/bin" "/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin" "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin" "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin" "/opt/local/bin"))
 '(tramp-use-ssh-controlmaster-options nil)
 '(safe-local-variable-values '((tab-width 2)))
 '(vc-follow-symlinks t)
 '(which-function-mode t)
 '(winner-mode t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-line ((t (:inherit font-lock-warning-face)))))

;; Solarized Theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
(load-theme 'solarized t)
(defun maxpage ()
  (interactive)
  (load-theme 'solarized-dark t))
(defun un-maxpage ()
  (interactive)
  (load-theme 'solarized-light t))

(defun loser ()
  (interactive)
  (evil-mode 1))
(defun god ()
  (interactive)
  (evil-mode 0))

(setq initial-major-mode 'ruby-mode)

(global-set-key [remap dabbrev-expand] 'hippie_expand)

(display-time)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
