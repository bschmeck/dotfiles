#! /usr/bin/env ruby

class XRandR
  BUILT_IN_DISPLAY = "eDP-1".freeze

  def self.on(name, mode, primary: false, crtc_number: nil)
    command = ["xrandr", "--output #{name}", "--mode #{mode}"]
    command << "--primary" if primary
    command << "--crtc #{crtc_number}" if crtc_number
    command = command.join " "

    `#{command}`
  end

  def self.off(name)
    `xrandr --output #{name} --off`
  end

  def self.position(name, location)
    loc_str = if location == :left
                "--left-of"
              elsif location == :mirror
                "--same-as"
              elsif location == :right
                "--right-of"
              else
                raise ArgumentError, "Unsupported location #{location}"
              end
    `xrandr --output #{name} #{loc_str} #{BUILT_IN_DISPLAY}`
  end

  def self.status_of(name, mode)
    statuses.detect do |status|
      status.name == name &&
        (status.preferred_mode&.start_with?(mode) || status.modes.first&.start_with?(mode))
    end
  end

  def self.statuses
    return to_enum(__method__) unless block_given?

    status = nil
    `xrandr`.each_line do |line|
      next if line.start_with? "Screen"

      if line.start_with? " "
        status.modes << line.lstrip
      else
        yield status if status
        status = XRandRStatus.new(line)
      end
    end
    yield status if status
  end
end

class XRandRStatus
  attr_reader :modes, :name, :properties
  def initialize(properties_line)
    @name, @connected, @properties = properties_line.split(" ", 3)
    @modes = []
  end

  def connected?
    @connected == "connected"
  end

  def active_mode
    modes.detect{|m| m =~ /\*/ }
  end

  def preferred_mode
    modes.detect{|m| m =~ /\+/ }
  end
end

class Monitor
  attr_reader :crtc_number, :location, :mode, :name, :primary

  def initialize(name, mode, location: nil, primary: false, crtc_number: nil)
    @mode = mode
    @name = name
    @location = location
    @primary = primary
    @crtc_number = crtc_number
  end

  def on
    XRandR.on(name, mode, primary: primary, crtc_number: crtc_number)
    XRandR.position(name, location) if location
  end

  def off
    XRandR.off(name)
  end

  def on?
    !!status.active_mode
  end

  def off?
    !on?
  end

  def toggle
    return unless status

    if status.connected? && off?
      on
    else
      off
    end
  end

  def status
    XRandR.status_of(name, mode)
  end
end

HOME = Monitor.new("HDMI-2", "1920x1080", location: :left, primary: true, crtc_number: 2)
LAPTOP = Monitor.new("eDP-1", "1920x1080", primary: true)
WORK = Monitor.new("HDMI-2", "3440x1440", location: :right, primary: false)

if ARGV[0] == "home"
  HOME.on
elsif ARGV[0] == "mirror"
  XRandR.position(WORK.name, :mirror)
elsif ARGV[0] == "single"
  WORK.off
  HOME.off
  LAPTOP.on
elsif ARGV[0] == "toggle"
  WORK.toggle
  HOME.toggle
elsif ARGV[0] == "work"
  WORK.on
elsif ARGV[0] == "hdmi"
  HOME.on
  LAPTOP.off
end
