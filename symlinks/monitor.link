#! /usr/bin/env ruby

class XRandR
  BUILT_IN_DISPLAY = "eDP-1".freeze

  def self.on(name, mode)
    `xrandr --output #{name} --mode #{mode}`
  end

  def self.off(name)
    `xrandr --output #{name} --off`
  end

  def self.position(name, location)
    loc_str = if location == :left
                "--left-of"
              elsif location == :mirror
                "--same-as"
              elsif location == :right
                "--right-of"
              else
                raise ArgumentError, "Unsupported location #{location}"
              end
    `xrandr --output #{name} #{loc_str} #{BUILT_IN_DISPLAY}`
  end

  def self.status_of(name)
    statuses.detect{|status| status.name == name }
  end

  def self.statuses
    return to_enum(__method__) unless block_given?

    status = nil
    `xrandr`.each_line do |line|
      next if line.start_with? "Screen"

      if line.start_with? " "
        status.modes << line
      else
        yield status if status
        status = XRandRStatus.new(line)
      end
    end
  end
end

class XRandRStatus
  attr_reader :modes, :name, :properties
  def initialize(properties_line)
    @name, @connected, @properties = properties_line.split(" ", 3)
    @modes = []
  end

  def connected?
    @connected == "connected"
  end

  def active_mode
    modes.detect{|m| m =~ /\*/ }
  end
end

class Monitor
  attr_reader :default_location, :mode, :name

  def initialize(name, mode, default_location = nil)
    @mode = mode
    @name = name
    @default_location = default_location
  end

  def on
    XRandR.on(name, mode)
    XRandR.position(name, default_location) if default_location
  end

  def off
    XRandR.off(name)
  end

  def on?
    status = XRandR.status_of(name)

    status.connected? && !!status.active_mode
  end

  def toggle
    on? ? off : on
  end
end

HOME = Monitor.new("HDMI-2", "1920x1080", :left)
LAPTOP = Monitor.new("eDP-1", "1920x1080_60.00")
WORK = Monitor.new("DP-1", "2560x1440", :right)

if ARGV[0] == "home"
  HOME.on
elsif ARGV[0] == "mirror"
  XRandR.position(WORK.name, :mirror)
elsif ARGV[0] == "single"
  WORK.off
  HOME.off
  LAPTOP.on
elsif ARGV[0] == "toggle"
  WORK.toggle
elsif ARGV[0] == "work"
  WORK.on
end
