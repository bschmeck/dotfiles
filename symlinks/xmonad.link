-- default desktop configuration for Fedora

import qualified XMonad.StackSet as W
import Data.Char (toLower)
import Data.List (intercalate)

import System.IO (hPutStrLn)
import System.Posix.Env (getEnv)
import Data.Maybe (maybe)

import Graphics.X11.ExtraTypes.XF86
import XMonad
import XMonad.Actions.CycleWS
import XMonad.Config.Desktop
import XMonad.Config.Gnome
import XMonad.Config.Kde
import XMonad.Config.Xfce
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.UrgencyHook
import XMonad.Util.EZConfig(additionalKeys)
import XMonad.Util.NamedWindows(getName)
import XMonad.Util.Run(spawnPipe)

-- From http://blog.wheerd.de/2012/06/14/xmonad-with-dzen-and-conky/
myDzenStatus = "dzen2 -x '0' -w '1000' -ta '1'" ++ myDzenStyle
myDzenConky = "killall conky; conky -c ~/.conkyrc | dzen2 -x '1000' -ta 'r'" ++ myDzenStyle
myDzenStyle = " -h '24' -y '0' -fg '#777777' -bg '#222222' -dock"
-- Very plain formatting, non-empty workspaces are highlighted,
-- urgent workspaces (e.g. active IM window) are highlighted in red
myDzenPP  = dzenPP
    { ppCurrent = dzenColor "#3399ff" "" . wrap " " " "
    , ppHidden  = dzenColor "#dddddd" "" . wrap " " " "
    , ppHiddenNoWindows = dzenColor "#777777" "" . wrap " " " "
    , ppUrgent  = dzenColor "#ff0000" "" . wrap " " " "
    , ppSep     = "  "
    , ppLayout  = \y -> ""
    , ppTitle   = dzenColor "#ffffff" "" . wrap " " " "
    }

myLogHook h = dynamicLogWithPP $ myDzenPP { ppOutput = hPutStrLn h }
myModMask = mod4Mask
myTerminal = "terminator"

-- From https://github.com/doitian/xmonad-starter-kit/blob/master/xmonad.hs

data LibNotifyUrgencyHook = LibNotifyUrgencyHook deriving (Read, Show)

instance UrgencyHook LibNotifyUrgencyHook where
    urgencyHook LibNotifyUrgencyHook w = do
        name <- getName w
        ws <- gets windowset
        c <- withDisplay $ \d -> fmap resClass $ io $ getClassHint d w
        whenJust (W.findTag w ws) (flash name c)
      where flash _ "Pidgin" _ = spawn "true"
            flash _ "emesene" _ = spawn "true"
            flash name c index = spawn $
                                 intercalate " " $
                                 [ "notify-send -i"
                                 , icon
                                 , show $ show name
                                 , show $ "on " ++ index ]
                where icon = case c of
                               "URxvt" -> "gnome-terminal"
                               otherwise -> map toLower c

main = do
     status <- spawnPipe myDzenStatus
     conky <- spawnPipe myDzenConky

     session <- getEnv "DESKTOP_SESSION"
     -- http://stackoverflow.com/questions/15120981/modifying-xmonad-configuration-on-fedora-like-distro
     let config = maybe desktopConfig desktop session
     xmonad $ withUrgencyHookC LibNotifyUrgencyHook urgencyConfig { suppressWhen = Focused } $ config
       {
         logHook = myLogHook status,
         modMask = myModMask,
         terminal = myTerminal,
         startupHook = do
           startupHook config
           spawn "~/.xmonad/scripts/.initrc"
       } `additionalKeys`
       [
         ((mod4Mask .|. shiftMask, xK_z), spawn "xrandr >> /dev/null && slock"),
         ((mod4Mask, xK_Print), spawn "flameshot gui -p /tmp/screenshots/"),
         ((0, xF86XK_AudioLowerVolume), spawn "amixer set Master 5%-"),
         ((0, xF86XK_AudioRaiseVolume), spawn "amixer set Master 5%+"),
         ((0, xF86XK_AudioMute), spawn "amixer set Master toggle"),
         -- XMonad's ExtraTypes doesn't support xF86XK_AudioMicMute for some reason
         ((0, 0x1008FFB2), spawn "amixer set Capture toggle"),
         ((mod4Mask, xK_f), swapNextScreen),
         ((mod4Mask, xK_minus), toggleWS),
         ((mod4Mask .|. shiftMask, xK_o), spawn "/home/bschmeck/bin/monitor toggle && xmonad --recompile; xmonad --restart")
       ]

desktop "gnome" = gnomeConfig
desktop "kde" = kde4Config
desktop "xfce" = xfceConfig
desktop "xmonad-mate" = gnomeConfig
desktop _ = desktopConfig
