#! /usr/bin/env ruby

def translate(subdomain)
  aliases = {
    "amex" => "blue",
    "eu" => "eu-central-1.aws.kenna",
    "hsbc" => "csvm",
    "rbc" => "cvm"
  }

  return subdomain unless aliases.key? subdomain

  aliased = aliases[subdomain]

  puts "You asked for #{subdomain}.  Connecting to #{aliased}."

  aliased
end

def get_integer_in_range(range, prompt)
  print prompt
  input = Integer(STDIN.gets.chomp)
  raise unless range === input

  input
rescue
  puts "Invalid value.  Please try again."
  get_integer_in_range(range, prompt)
end

def get_host(hosts)
  return hosts.first if hosts.count == 1

  hosts.each_with_index do |host, i|
    puts "[#{i}] #{host}"
  end
  puts "[#{hosts.count}] Quit"

  choice = get_integer_in_range(0..hosts.size, "Which host? ")

  hosts[choice]
end

if ARGV.count != 1
  puts "The only accepted parameter is a KPD subdomain"
  exit 1
end

subdomain = translate(ARGV[0])

step_hosts = `step ssh hosts`

matches = step_hosts
            .lines
            .map{|line| line.split.first }
            .grep(%r{\.#{subdomain}\.})
            .select{|host| host.start_with? "conduit-console" }
            .uniq

if matches.empty?
  puts "Unable to find a matching host."
  exit 1
end

if matches.count > 10
  puts "Too many matching hosts.  Here are the first 10:"
  puts matches.first(10)
  exit 1
end

host = get_host(matches)

exit unless host

exec("ssh #{host}")
